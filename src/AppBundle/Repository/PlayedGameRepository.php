<?php

namespace AppBundle\Repository;

/**
 * PlayedGameRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlayedGameRepository extends \Doctrine\ORM\EntityRepository
{

    public function playerWinTotal($playerID)
    {
		$em = $this->getEntityManager();

		$query = $em->createQuery(
			'SELECT COUNT (pg)
			FROM AppBundle:PlayedGame pg
			WHERE pg.winningPlayerID = :playerID'
		)->setParameter(':playerID', $playerID);

		return $query->getSingleScalarResult();
    }

    public function playerTieTotal($playerID)
    {
		$em = $this->getEntityManager();

		$query = $em->createQuery(
			'SELECT COUNT (pg)
			FROM AppBundle:PlayedGame pg
			WHERE (pg.p1ID = :playerID OR pg.p2ID = :playerID) AND pg.winningPlayerID = 0'
		)->setParameter(':playerID', $playerID);

		return $query->getSingleScalarResult();
    }


    public function playerLossTotal($playerID)
    {
		$em = $this->getEntityManager();

		$query = $em->createQuery(
			'SELECT COUNT (pg)
			FROM AppBundle:PlayedGame pg
			WHERE (pg.p1ID = :playerID OR pg.p2ID = :playerID) AND pg.winningPlayerID != :playerID'
		)->setParameter(':playerID', $playerID);

		return $query->getSingleScalarResult();
    }



    public function playerWinTotalAgainstAnother($p1ID, $p2ID)
    {
		$em = $this->getEntityManager();

		$parameters = array(
			':p1ID' => $p1ID,
			':p2ID' => $p2ID
		);

		$query = $em->createQuery(
			'SELECT COUNT (pg)
			FROM AppBundle:PlayedGame pg
			WHERE (pg.p1ID = :p2ID OR pg.p2ID = :p2ID) AND pg.winningPlayerID = :p1ID'
		)->setParameters($parameters);

		return $query->getSingleScalarResult();
    }

    public function playerTieTotalAgainstAnother($p1ID, $p2ID)
    {
		$em = $this->getEntityManager();

		$parameters = array(
			':p1ID' => $p1ID,
			':p2ID' => $p2ID
		);

		$query = $em->createQuery(
			'SELECT COUNT (pg)
			FROM AppBundle:PlayedGame pg
			WHERE 	((pg.p1ID = :p1ID AND pg.p2ID = :p2ID) OR (pg.p1ID = :p2ID AND pg.p2ID = :p1ID)) AND
					pg.winningPlayerID = 0'
		)->setParameters($parameters);

		return $query->getSingleScalarResult();
    }

    public function playerLossTotalAgainstAnother($p1ID, $p2ID)
    {
		$em = $this->getEntityManager();

		$parameters = array(
			':p1ID' => $p1ID,
			':p2ID' => $p2ID
		);

		$query = $em->createQuery(
			'SELECT COUNT (pg)
			FROM AppBundle:PlayedGame pg
			WHERE (pg.p1ID = :p1ID OR pg.p2ID = :p1ID) AND pg.winningPlayerID = :p2ID'
		)->setParameters($parameters);

		return $query->getSingleScalarResult();
    }

    public function playerChoiceHistoryIndexedByChoiceID($playerID)
	{
		$playerChoiceHistory = self::playerChoiceHistory($playerID);

		$playerChoiceHistoryIndexedByChoiceID = array();
		foreach ($playerChoiceHistory as $index => $row) {
			$choiceID = $row["choiceID"];
			$playerChoiceHistoryIndexedByChoiceID[$choiceID] = $row;
		}

		return $playerChoiceHistoryIndexedByChoiceID;
	}

    public function playerChoiceHistory($playerID)
    {
		$playerChoiceHistory = array();
    	$em = $this->getEntityManager();

    	# Make sure every choice is represented even if player has never chosen.
    	# Make sure you count records where player is player #1 or player #2
    	# If player plays self, count both times :P
		$query = $em->createQuery(
			'SELECT c.choiceID, c.choiceName, COUNT (pg) AS timesChosen
			FROM AppBundle:Choice c
			LEFT JOIN AppBundle:PlayedGame pg
			WHERE (c.choiceID = pg.p1Choice AND pg.p1ID = :playerID) OR
				  (c.choiceID = pg.p2Choice AND pg.p2ID = :playerID)
			GROUP BY c.choiceID'
		)->setParameter(':playerID', $playerID);
		$playerChoiceHistory = $query->getResult();

    	return $playerChoiceHistory;
    }

}
